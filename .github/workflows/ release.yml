name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract Go version
        id: go_version
        run: |
          go_version=$(grep '^go ' go.mod | awk '{print $2}')
          echo "go-version=$go_version" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go-version }}

      - name: Print Go version
        run: go version

      - name: Install dependencies
        run: |
          go mod tidy
          go mod download

      - name: Build binary
        run: |
          mkdir -p build
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o build/arsa-${{ matrix.goos }}-${{ matrix.goarch }}
        env:
          CGO_ENABLED: 0

      - name: Set executable permissions
        run: chmod +x build/arsa-${{ matrix.goos }}-${{ matrix.goarch }}


      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: arsa-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/arsa-${{ matrix.goos }}-${{ matrix.goarch }}

  create_release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract Go version
        id: go_version
        run: |
          go_version=$(grep '^go ' go.mod | awk '{print $2}')
          echo "go-version=$go_version" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go-version }}

      - name: Print Go version
        run: go version

      - name: Get previous tag
        id: prev_tag
        run: echo "PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)" >> $GITHUB_ENV

      - name: Generate release notes
        id: release_notes
        run: |
          PREV_TAG=${{ env.PREV_TAG }}
          COMMITS=$(git log ${PREV_TAG}..${{ github.sha }} --oneline)
          echo "RELEASE_BODY=$(echo -e "## Changes\n\n$COMMITS")" >> $GITHUB_ENV
      

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false

      - name: Set upload URL output
        run: echo "UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV
  
  upload_assets:
    runs-on: ubuntu-latest
    needs: [build, create_release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: build

      - name: List downloaded files
        run: ls -l build

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
        run: |
          for file in $(find build -type f); do
            echo "Uploading $file..."
            echo ${{ github.ref_name }}
            gh release upload ${{ github.ref_name }} "$file" --clobber
          done
